#ifndef IMAGE_GENERATOR_H
#define IMAGE_GENERATOR_H

//------------------------------------------------------------
//
// This file is part of HAPLOS <http://pc2lab.cec.miamiOH.edu/>
//
// Human  Population  and   Location  Simulator (HAPLOS)  is
// free software: you can  redistribute it and/or  modify it
// under the terms of the GNU  General Public License  (GPL)
// as published  by  the   Free  Software Foundation, either
// version 3 (GPL v3), or  (at your option) a later version.
//
// HAPLOS is distributed in the hope that it will  be useful,
// but   WITHOUT  ANY  WARRANTY;  without  even  the IMPLIED
// WARRANTY of  MERCHANTABILITY  or FITNESS FOR A PARTICULAR
// PURPOSE.
//
// Miami University and the HAPLOS  development team make no
// representations  or  warranties  about the suitability of
// the software,  either  express  or implied, including but
// not limited to the implied warranties of merchantability,
// fitness  for a  particular  purpose, or non-infringement.
// Miami  University and  its affiliates shall not be liable
// for any damages  suffered by the  licensee as a result of
// using, modifying,  or distributing  this software  or its
// derivatives.
//
// By using or  copying  this  Software,  Licensee  agree to
// abide  by the intellectual  property laws,  and all other
// applicable  laws of  the U.S.,  and the terms of the  GNU
// General  Public  License  (version 3).  You  should  have
// received a  copy of the  GNU General Public License along
// with HAPLOS.  If not, you may  download copies  of GPL V3
// from <http://www.gnu.org/licenses/>.
//
//-----------------------------------------------------------

#include <string>
#include "BuildingGenerator.h"
#include "XFigHelper.h"
#include "OsmXFigHelper.h"

/** Class to perform the core task of generating an xfig file for
    visualization and validation.  This class is used in
    BuildingGenerator::process method.  This class uses the
    information in the BuildingGenerator to produce a xfig file.  The
    xfig file is eseentially just a text file that can be viewed using
    the Linux xfig program.  This permits individual ways and
    buildings to be inspected.  Furthermore, the fig file can be
    readily converted to a PDF or JPG file for papers etc.

    <p>The xfig file generation is facilitated by 2 different classes,
    namely XFigHelper (which generates the final XFig code) and
    OsmXFigHelper (that helps translating points, downloading map tile
    images etc.)</p>
 */
class ImageGenerator {
public:
    /** The constructor for image generator.

        The constructor merely initializes the instance variables to
        default initial values.

        \param[in] zoomLevel The zoom-level at which the map/figure is
        to be generated.

        \param[in] cacheDir The directory in which map tiles are to be
        cached.  If the tile image already exists in the cache it is
        not re-downloaded.
     */
    ImageGenerator(int zoomLevel = 15,
                   const std::string& cacheDir = "../cache");

    /** The destructor.

        This is just a place holder as the destructor does not have
        any special tasks to perform (because this class does not
        directly use any dynamic memory).
     */    
    ~ImageGenerator();

    /** The main method to generate the figure.

        This method coordinates the various tasks involved in
        generating a xfig file from the given bulding generator object.

        \param[in] bg The building generator whose data is to be used
        to render the figure.

        \param[in] figFilePath The path to the output file to which
        the figure data is to be written.

        \param[in] drawWays If this flag is true then ways (roads,
        streets, etc.) in the OSM data (in the BuildingGenerator) are
        drawn.

        \param[in] drawBuildings If this flag is true then all the
        buildings generated by the building generator are drawn.
    */
    void generate(const BuildingGenerator& bg,
                  const std::string& figFilePath,
                  const bool drawWays = true,
                  const bool drawBuildings = true);

protected:
    /** Set the top-left coordinate for translating points.

        This method uses the latitude and longitude of the top-left
        corner to setup the minimum <x,y> values in the OsmXFigHelper.
        This information is used to translate coordinates from
        absolute (for the whole map) to relative (to the figure being
        generated).
        
        \param[in] osm The OSM object that contains the bounds of the
        region for which the figure is being generated.
    */
    void setTopLeftCoord(const OsmSection& osm);

    /** Generate the background map tiles for the region being
        operated on.

        This method uses the OsmXFigHelper object to generate a
        grid/matrix of map tile images covering the section that is
        being processed.

        \param[in] osm The OSM object that contains the bounds of the
        region for which the figure is being generated.        
    */
    void generateMapTiles(const OsmSection& osm);

    /** Draw a way (road, street, etc.).

        This is a helper method that is used to draw a single way.
        The way is generated as a poly-line using helper methods in
        both OsmXFigHelper and XFigHelper classes.

        \param[in] way Information about the way to be drawn.

        \param[in] osm The OsmSection object that contains information
        about the nodes in the way.
    */
    void draw(const OsmWay& way, const OsmSection& osm);

    /** Draw a building.

        This is a helper method that draws a building.  For
        computational efficiency buildings are approximated to
        circular regions.

        \param[in] bldg The building to be drawn by this method.
    */
    void draw(const OsmBuilding& bldg);

private:
    /** The helper class to generate the actual XFig codes. */
    XFigHelper xfig;

    /** This is a helper class that assists in generation of the
        figure.  Specifically, this class helps with downloading and
        managing image tiles.  This class also helps with translating
        <latitude, longitude> pairs to <x, y> values.
    */
    OsmXFigHelper figHelp;

    /** The zoom level at which the figure is to be generated. Zoom
        level 18 has highest level of detail, but the figures can be
        huge.
    */
    int zoom;

    /** The cache directory to be used for caching map tiles. If a map
        tile image is present in the cache, then it does not need to
        be downloaded again.  This makes the process of figure
        generation much faster.
    */
    std::string cacheDir;
};

#endif

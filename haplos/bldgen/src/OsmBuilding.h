#ifndef OSM_BUILDING_H
#define OSM_BUILDING_H

//------------------------------------------------------------
//
// This file is part of HAPLOS <http://pc2lab.cec.miamiOH.edu/>
//
// Human  Population  and   Location  Simulator (HAPLOS)  is
// free software: you can  redistribute it and/or  modify it
// under the terms of the GNU  General Public License  (GPL)
// as published  by  the   Free  Software Foundation, either
// version 3 (GPL v3), or  (at your option) a later version.
//
// HAPLOS is distributed in the hope that it will  be useful,
// but   WITHOUT  ANY  WARRANTY;  without  even  the IMPLIED
// WARRANTY of  MERCHANTABILITY  or FITNESS FOR A PARTICULAR
// PURPOSE.
//
// Miami University and the HAPLOS  development team make no
// representations  or  warranties  about the suitability of
// the software,  either  express  or implied, including but
// not limited to the implied warranties of merchantability,
// fitness  for a  particular  purpose, or non-infringement.
// Miami  University and  its affiliates shall not be liable
// for any damages  suffered by the  licensee as a result of
// using, modifying,  or distributing  this software  or its
// derivatives.
//
// By using or  copying  this  Software,  Licensee  agree to
// abide  by the intellectual  property laws,  and all other
// applicable  laws of  the U.S.,  and the terms of the  GNU
// General  Public  License  (version 3).  You  should  have
// received a  copy of the  GNU General Public License along
// with HAPLOS.  If not, you may  download copies  of GPL V3
// from <http://www.gnu.org/licenses/>.
//
//-----------------------------------------------------------

#include <iostream>
#include <vector>
#include "Utils.h"

/** A simple class to encapsulate information about buildings
    generated by the building generator.  The naming of this class may
    be a bit misleading -- although this class is called "Osm"
    building, it does not actually contain data from OSM XML file.
    Instead the data encapsulated by it is generated by the building
    generator.  However, it is called "Osm" to distinguish it from the
    Building class in HAPLOS.

    \note A large number of buildings can be generated when processing
    an OSM section.  Consequently, this class must be "light weight"
    and should not have unnecessary instance variables.
*/
class OsmBuilding {
    /** Convenience method to print building information.

        \param[out] os The output stream to where the data is to be
        written.

        \param[in] b The building whose information is to be printed.

        \return The output stream passed in as the parameter.        
     */
    friend std::ostream& operator<<(std::ostream& os, const OsmBuilding& b);
public:
    /** Enumeration for different types of buildings that can be generated.

        This enumeration defines all the valid types of buildings that
        this building generator can produce.  The information is used
        both for visualization, schedule generation (by HAPLOS), and
        simulation.
    */
    enum Kind { INVALID = 0, /**< enum Constant for invalid value */
                HOME = 1,    /**< enum Homes where people live */
                SCHOOL = 2,  /**< enum School buildings */
                OFFICE = 3,  /**< enum Office buildings */
                DAYCARE = 4, /**< enum Day care (different from school) */
                HOSPITAL = 5 /**< enum Hospitals */
    };
    
    /** Convenience (and default) constructor to create a building

        This constructor can be used to create a node given its key
        information.

        \param[in] kind The kind of this buliding.  This value must be
        one of the predefined enumeration values defined in this
        class.
        
        \param[in] id The id value associated with this building

        \param[in] latitude The latitude value associated with this
        building.  The latitude is typically in the range -90 <
        latitude < 90.

        \param[in] longitude The longitude value associated with this
        building.  The longitude is typically in the range -180 <
        longitude < 180.

        \param[in] radius The size of this building in miles.
    */
    OsmBuilding(const OsmBuilding::Kind kind = INVALID, const long id = -1,
                const double latitude = 0.0, const double longitude = 0.0,
                const double radius = 0.0);

    /** The destructor.

        This is just a place holder as the destructor does not have
        any special tasks to perform (because this class does not
        directly use any dynamic memory).
     */
    ~OsmBuilding();

    /** Obtain the type of building.

        \return The type/kind for this building (set when this object
        was instantiated).
    */    
    OsmBuilding::Kind getKind() const { return kind; }
    
    /** Obtain the ID associated with this building

        \return The ID for this building (set when this object was
        instantiated).
    */
    inline long getID() const { return id; }

    /** Obtain the latitude and longitude value for this building.

        This method can be used to obtain the latitude and longitude
        values associated with this building.  This is the value that
        was set when this object was instantiated.

        \return The <latitude, longitude> pair of values associated
        with this building.
    */
    inline Location getLocation() const {
        return Location(latitude, longitude);
    }

    /** Obtain the radius (determines size) of this building.

        This method can be used to obtain the radius of this building
        This is the value that was set when this object was
        instantiated.

        \return The radius of this building in miles.
    */
    inline double getRadius() const {
        return radius;
    }
    
    /** Return the great circle distance from this building to another.

        This method computes the distance between this building and.  The
        distance between two buildings is computed using Haversine
        formula: https://en.wikipedia.org/wiki/Haversine_formula

        \param[in] other The other building to which the distance is to be
        computed.

        \return The distance to the other building in miles.

        \see Utils::getDistance
    */
    double operator-(const OsmBuilding& other) const;

    /** A constant object used to refer to an invalid building

        This is a convenience global constant that is used to refer to
        an invalid building.  This constant is used as return value
        from methods that return references to OsmBuilding objects.
    */
    static const OsmBuilding InvalidBuilding;
    
protected:
    // Currently this class does not have protected members

private:
    /** A predefined type associated with this building.  */
    OsmBuilding::Kind kind;
    
    /**  The unique OSM-id value associated with this building.  Typically
        this value is set once in the constructor and is never changed
        during the life time of this object.
    */
    long id;
    
    /** The latitude value associated with this building.  This value is
        in the range: -90 < latitude < 90.  Typically this value is
        set once in the constructor and is never changed during the
        life time of this object.
    */
    double latitude;

    /** The longitude value associated with this building.  This value is
        in the range: -180 < longitude < 180.  Typically this value is
        set once in the constructor and is never changed during the
        life time of this object.
    */    
    double longitude;

    /** The radius of this building that determines the footprint of
        this building.  For simplicitly buildings are approximated to
        circles.  The radius value is specified in miles.  So for
        conventional homes (say ~2000 sq. feet in USA) the radius
        would be 0.009 miles.
    */
    double radius;
};

/** A list of OsmBuilding entries.  The list of buildings is
    encapsulated in the BuildingGenerator class.  However, the
    building map is defined here so that the type can be reused in
    different related classes.
*/
using BuildingList = std::vector<OsmBuilding>;

#endif

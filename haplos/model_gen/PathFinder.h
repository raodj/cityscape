#ifndef PATH_FINDER_H
#define PATH_FINDER_H

//---------------------------------------------------------------------------
//
// Copyright (c) PC2Lab Development Team
// All rights reserved.
//
// This file is part of free(dom) software -- you can redistribute it
// and/or modify it under the terms of the GNU General Public
// License (GPL)as published by the Free Software Foundation, either
// version 3 (GPL v3), or (at your option) a later version.
//
// The software is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the IMPLIED WARRANTY of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
//
// Miami University and PC2Lab makes no representations or warranties
// about the suitability of the software, either express or implied,
// including but not limited to the implied warranties of
// merchantability, fitness for a particular purpose, or
// non-infringement.  Miami University and PC2Lab is not be liable for
// any damages suffered by licensee as a result of using, result of
// using, modifying or distributing this software or its derivatives.
//
// By using or copying this Software, Licensee agrees to abide by the
// intellectual property laws, and all other applicable laws of the
// U.S., and the terms of this license.
//
// Authors: Dhananjai M. Rao       raodm@miamiOH.edu
//
//---------------------------------------------------------------------------

#include <vector>
#include <unordered_map>
#include <string>

#include "ArgParser.h"
#include "Node.h"
#include "Way.h"
#include "Building.h"

class PathFinder {
public:
    /** The top-level method that coordinates the various tasks.
        
        This method essentially calls various internal helper methods
        in the following order:

        <ol>

        <li>First it calls loadModel method which loads the generated
        model with nodes, ways, and bulidings data into memory.</li>
        
        </ol>
    */
    int run(int argc, char *argv[]);
    
protected:
    /** Internal helper method to parse command-line arguments and
        poulate the internal cmdLineArgs object with pertinent
        information.

        This method internally uses the ArgParser to parse out the
        command-line argument specified by the user.

        \param[in] args The number of command-line arguments -- i.e.,
        the size of the argv array.

        \param[in] argv The actual command-line arguments.

        \return This method returns zero if the command-line arguments
        were successfully processed.  On errors it returns a non-zero
        error code.
    */
    int processArgs(int argc, char *argv[]);

    /** Internal helper method to load nodes, ways, and buildings from
        a given model file.  Specifically it loads the data into
        nodeList, wayMap, and buildingMap instance variables in this
        class.

        \param[in] modelFilePath The path to the text file from where
        model data is to be loaded. This text/model file must have
        been generated by ModelGenerator in order to correctly
        operate with this method.
     */
    int loadModel(const std::string& modelFilePath);

    /** Add Way entries nodesWaysList vector in this class.  This
        information is handy to quickly find the list of ways
        intersecting at a given node.
    */
    void computeNodesWaysList();

    /** Helper method to find the nearest node in a given way that
        contains the given coordinate.

        This method checks pairs of consecutive nodes to see if they
        can contain (but not necessarily on the line segment) the
        specified point.  If so it returns the starting node.

        \param[in] way The way on which the given point is to be
        located.

        \param[in] latitude The latitude of the point to be checked.

        \param[in] longitude The longitude of the point to be checked.

        \return If the way contains the point then this method returns
        a valid index of the first node associated with the segment
        containing the point.  Otherwise this method returns -1.
    */
    int findNearestNode(const Way& way, const double latitude,
                        const double longitude) const;

    /** Find path between 2 segements on the same way.

        Find the Point either for a give node (if nodeID != -1) or the
        intersection with the way based on a building ID.
        
        \param[in] src The source path segement from where the way is
        to be computed.

        \param[in] dest The destination path segment to where the path
        is to be computed.

        \return A path segement between the two ways.
    */
    PathSegment getPathOnSameWay(const PathSegment& src,
                                 const PathSegment& dest) const;

    /** Convenience method to return the latitude and longitude of the
        starting/ending point associated with a given way.

        \param[in] path The path for which the starting/ending
        latitude and longitude is to be returned by this method.

        \return The Point containing the longitude (in Point::first)
        and latitude (in Point::second).
    */
    Point getLatLon(const PathSegment& path) const;

private:
    /** This is a simple inner class that is used to conveniently
        encapsulate various command-line arguments that is used by the
        model generator.  This encapsulation streamlines managing
        several different command-line arguments in a streamlined
        manner
    */
    class CmdLineArgs {
    public:
        /** The path to the text file from where model data is to be
            loaded. This text file must have been generated by
            ModelGenerator in order to correctly operate with this
            class.  Use the \c --model command-line argument to set
            its value.
        */
        std::string modelFilePath;

        /** The starting ID of the building from where the path is to
            be computed.
        */
        long startBldID = -1;

        /** The ending ID of the building to which the path is to be
            computed.
        */
        long endBldID = -1;
    } cmdLineArgs;

    /** The list of nodes loaded from the model file.  The nodes are
        stored as a vector as they are generated as a contiguous list
        by ModelGenerator.  This eases rapid look-up of nodes when
        finding path
    */
    std::vector<Node> nodeList;

    /** The unordered map that holds information about the ways in a
        given model.  This hash map is populated in the extractWays
        method.  The hash map enables rapid look-up of road
        information, given the unique ID of a way.  The look-up is
        used when routing traffic.
    */    
    std::unordered_map<long, Way> wayMap;

    /** The unordered map that holds information about buildings in a
        given model file.  The hash map enables rapid look-up of
        building information, given the unique ID of a building.
    */    
    std::unordered_map<long, Building> buildingMap;

    /** The list of ways associated with a given node. Nodes that are
        intersections will have one or more ways associated with them.
        This vector provides a convenient mapping to look-up ways
        intersecting at a given node when computing path.
    */
    std::vector<std::vector<long>> nodesWaysList;
};

#endif

#ifndef WAY_RISK_ANALYZER_H
#define WAY_RISK_ANALYZER_H

//---------------------------------------------------------------------------
//
// Copyright (c) PC2Lab Development Team
// All rights reserved.
//
// This file is part of free(dom) software -- you can redistribute it
// and/or modify it under the terms of the GNU General Public
// License (GPL)as published by the Free Software Foundation, either
// version 3 (GPL v3), or (at your option) a later version.
//
// The software is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the IMPLIED WARRANTY of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
//
// Miami University and PC2Lab makes no representations or warranties
// about the suitability of the software, either express or implied,
// including but not limited to the implied warranties of
// merchantability, fitness for a particular purpose, or
// non-infringement.  Miami University and PC2Lab is not be liable for
// any damages suffered by licensee as a result of using, result of
// using, modifying or distributing this software or its derivatives.
//
// By using or copying this Software, Licensee agrees to abide by the
// intellectual property laws, and all other applicable laws of the
// U.S., and the terms of this license.
//
// Authors: Dhananjai M. Rao       raodm@miamiOH.edu
//
//---------------------------------------------------------------------------

#include <ctime>
#include <string>
#include <vector>
#include <unordered_map>
#include "ArgParser.h"
#include "ShpBldCatalog.h"
#include "PathFinder.h"

/**
 * This map tracks the number of cars that pass through the node in a
 * 15-minute time window.  The number of 15-minute windows for each
 * node depends on the time range used for analysis.
 */
using NodeVisitMap = std::unordered_map<long, std::vector<int>>;

/**
 * A map to track the "ways" through which routes occurred and the
 * number of times each way was travered in a route. This map is used
 * to generate the final list of Ways in each route.
 */
using WayVisitMap = std::unordered_map<long, int>;

/** A short cut for timestamp structure */
using Timestamp = std::tm;

/**
 * The top-level class for computing the scores for ways in a given
 * model based on traffic patterns.  Currently, this class generates
 * routes between census tracts using taxi cab rides.
 */
class WayRiskAnalyzer {
public:
    /** The top-level method that coordinates the various tasks.
        
        This method essentially calls various internal helper methods
        in the following order:

        <ol>

        <li>First it calls loadModel method which loads the generated
        model with nodes, ways, and bulidings data into memory.</li>
        
        </ol>
    */
    int run(int argc, char *argv[]);

protected:
    /** This is a simple inner class that is used to conveniently
        encapsulate various command-line arguments that is used by the
        model generator.  This encapsulation streamlines managing
        several different command-line arguments in a streamlined
        manner
    */
    class CmdLineArgs {
    public:
        /** The path to the text file from where model data is to be
            loaded. This text file must have been generated by
            ModelGenerator in order to correctly operate with this
            class.  Use the \c --model command-line argument to set
            its value.
        */
        std::string modelFilePath;

        /** Optional output xfig file to which the route is to be
            drawn.  Use the \c --xfig command-line option to set it.
        */
        std::string xfigFilePath;

        /** The scale for the output XFIG figure so that various
            shapes and information are readable. Use the \c
            --xfig-scale command-line option to set it.
        */
        int figScale = 16384000;

        /** The minimum distance around the source and destination
            paths only within which the nodes are to be checked.
            Nodes outside this range are not checked as an
            optimization to improve performance.  Use the command-line
            option \c --search-dist to set it.
        */
        double minDist = 0.25;

        /** Additional distance to search in depending on the distance
            between the source and destination.  Use the command-line
            option \c --search-scale to set it.
        */
        double distScale = 0.1;

        /** Flag to indicate path should be optimized for time instead
            of distance.  Use the command-line option \c --best-time
            to set it.
        */
        bool useTime = false;

        /** Command-line arguments to indicate if a given number of
            randomly chosen pairs of buildings are to be used to
            test path finding algorithm.
        */
        int rndTestCount = -1;

        /** This string contains the full command-line as specified to
            the program. This string is created before any
            command-line arguments are processed.  This is convenient
            for logging purposes.
        */
        std::string fullCmdLine;

        /** The path to the shape file from where census tract shapes
            are to be loaded. This is specified via \c --shape */
        std::string shapeFilePath;

        /** The path to the DBF file that contains metadata for the
            census tract shapes. This is specified via the \c --dbf
            command-line option */
        std::string dbfFilePath;

        /** The path to the text file containing taxi cab rides.  This
            data is used to generate traffic to estimate traffic
            flowing through a given way/node.  This is specified via
            the \c --taxi-rides command-line option.
        */
        std::string taxiRidesFile;

        /** The starting date (inclusive) from where taxi rides in the
            text file are to be processed.  This data is used to
            generate traffic to estimate traffic flowing through a
            given way/node.  This is specified via the \c --start-date
            command-line option.
        */
        std::string startDate = "01/01/2022";
        
        /** The end date (inclusive) from where taxi rides in the
            text file are to be processed.  This data is used to
            generate traffic to estimate traffic flowing through a
            given way/node.  This is specified via the \c --end-date
            command-line option.
        */
        std::string endDate = "12/31/2022";

        /** The start minute (inclusive) of the day from where taxi
            rides in the text file are to be processed.  This data is
            used to generate traffic to estimate traffic flowing
            through a given way/node.  This value is assumed to be
            multiple of 15.  This is specified via the \c
            --end-minute command-line option.
        */
        int startMinute = 420;  // 7 am
        
        /** The end minute (inclusive) of the day up to which taxi
            rides in the text file are to be processed.  This data is
            used to generate traffic to estimate traffic flowing
            through a given way/node.  This is specified via the \c
            --end-minute command-line option.  It must be a multiple
            of 15.
        */
        int endMinute = 630;  // 10:30 am

        /**
           The batches in which taxi ride data is to be processed when
           using multiple threads.  This provides some balance between
           I/O overheads, memory usage, and multithreading using
           OpenMP.
         */
        int batchSize = 1000;

        /**
         * Path to the text file where node summary information is to
         * be written.  Use the \c --node-summary command-line option
         * to set this value.
         */
        std::string nodeSummaryFile;

        /**
         * Path to the text file where way summary information is to
         * be written.  Use the \c --way-summary command-line option
         * to set this value.
         */
        std::string waySummaryFile;
        
    } cmdLineArgs;
    
private: 
    /** Internal helper method to parse command-line arguments and
        poulate the internal cmdLineArgs object with pertinent
        information.

        This method internally uses the ArgParser to parse out the
        command-line argument specified by the user.

        \param[in] args The number of command-line arguments -- i.e.,
        the size of the argv array.

        \param[in] argv The actual command-line arguments.

        \return This method returns zero if the command-line arguments
        were successfully processed.  On errors it returns a non-zero
        error code.
    */
    int processArgs(int argc, char *argv[]);

    /**
     * Reads line-by-line from the taxi cab data file and perfroms the
     * following tasks:
     *    1. Ignores lines that don't fall within the startDate--endDate and
     *       startMinute--endMinute.
     *    2. Generates two random buildings from the two census tracts.
     *    3. Computes the path between them.
     *    4. Use the path to update traffic flowing through the nodes.
     */
    void processTaxiData(std::istream& taxiRideData, const Timestamp startDay,
                         const Timestamp endDay);

    /**
     * Convenience method to convert a timestamp of the form
     * 12/25/2022 03:45:00 PM to corresponding time structure to ease
     * further processing and comparisons
     */
    Timestamp toTimestamp(const std::string& timestamp) const;

    /**
     * Helper method to convert time to minutes in the day.
     *
     * \note Currently, this method ignores seconds.
     *
     * \param[in] ts The timestamp whose minute-of-the-day is to be
     * returned.
     *
     * \return Minute of the day (range is 0--1440).
     */
    long minuteOfDay(const Timestamp& ts) const {
        return ts.tm_min + (ts.tm_hour * 60);
    }

   /**
     * Determine if a given timestamp is at of after given reference
     * timestamp.
     *
     * \param[in] ref The reference timestamp for comparison.
     *
     * \param[in] ts The timestasmp for comparison.
     *
     * \return This method returns true if ts >= ref, while only
     * accounting for month, day, and year (ignoring minute of the day)
     */
    bool isHigher(const Timestamp& ref, const Timestamp& ts) {
        return ((ref.tm_year <= ts.tm_year) && (ref.tm_mon <= ts.tm_mon) &&
                (ref.tm_mday <= ts.tm_mday));
    }

private:
    /** A simple class that encapsulates the OSM data */
    OSMData osmData;

    /** The catalog that eases finding buildings in a given shape */
    ShpBldCatalog shpBldCatalog;

    /**
     * The list of nodes explored and the number of times each node
     * was visited.  Each node has (endTime - startTime) / 15, number
     * of entries.
     */
    NodeVisitMap nodeVisits;

    /**
     * The list of ways through which routes occurred and the number
     * of times each way was travered in a route. This map is used to
     * generate the final list of Ways in each route.
     */
    WayVisitMap wayVisits;

    /**
     * A simple inner-class to encapsulate key data read from taxi cab
     * rides file.
     */
    class RideBatchEntry {
    public:
        std::string startRegion;
        std::string endRegion;
        Timestamp   startTime;
        Timestamp   endTime;
        double      distance;  // in miles
    };

    std::vector<RideBatchEntry>
    getBatch(std::istream& taxiData, const Timestamp& startDay,
             const Timestamp& endDay, const int startMinute,
             const int endMinute, const size_t batchSize,
             const int stAreaCol = 6, const int endAreaCol = 7);

    /**
     * MT-safe helper method to update the counts for each node in the
     * path. This method assumes the nodeVisits is not shared.
     *
     * \param[in] path The path from where the nodes visited are to be
     * extracted and processed.  It is assumed that the path is built
     * using time and hence the distance metrics in the path is
     * actually time (in hours) since logical start.
     *
     * \param[out] nodeVisits The map in which the count for the nodes
     * are to be updated.
     *
     * \param[out] wayVisits The map in which the count for the ways
     * are to be updated.     
     *
     * \param[in] startMinute The starting time to be used to add to
     * each time step in the path.
     *
     * \param[in] maxEntries The maximum number of entries to be
     * present in each vector for a given node.
     */
    static void updateNodes(const Path& path, NodeVisitMap& nodeVisits,
                            WayVisitMap& wayVisits,
                            const int startMinute, const int maxEntries);

    /**
     * Writes summary of node visits to a given output stream. 
     */
    void writeNodeSummary(std::ostream& os) const;

    /**
     * Helper method to convert minutes of day to a string. For
     * example given 600 this method returns 10:00.
     *
     * \param[in] min The minutes of the day to be converted to a
     * string. This value must be in the range 0 to 1440.
     *
     * \return The string representation for minutes in 24-hour format.
     */
    std::string minToStr(const int min) const;

    /**
     * Write summary of ways visited to the given output stream.
     */
    void writeWaysSummary(std::ostream& os) const;
};

#endif

#ifndef BUILDINGHELPER_CPP
#define BUILDINGHELPER_CPP
//------------------------------------------------------------
//
// This file is part of HAPLOS <http://pc2lab.cec.miamiOH.edu/>
//
// Human  Population  and   Location  Simulator (HAPLOS)  is
// free software: you can  redistribute it and/or  modify it
// under the terms of the GNU  General Public License  (GPL)
// as published  by  the   Free  Software Foundation, either
// version 3 (GPL v3), or  (at your option) a later version.
//
// HAPLOS is distributed in the hope that it will  be useful,
// but   WITHOUT  ANY  WARRANTY;  without  even  the IMPLIED
// WARRANTY of  MERCHANTABILITY  or FITNESS FOR A PARTICULAR
// PURPOSE.
//
// Miami University and the HAPLOS  development team make no
// representations  or  warranties  about the suitability of
// the software,  either  express  or implied, including but
// not limited to the implied warranties of merchantability,
// fitness  for a  particular  purpose, or non-infringement.
// Miami  University and  its affiliates shall not be liable
// for any damages  suffered by the  licensee as a result of
// using, modifying,  or distributing  this software  or its
// derivatives.
//
// By using or  copying  this  Software,  Licensee  agree to
// abide  by the intellectual  property laws,  and all other
// applicable  laws of  the U.S.,  and the terms of the  GNU
// General  Public  License  (version 3).  You  should  have
// received a  copy of the  GNU General Public License along
// with HAPLOS.  If not, you may  download copies  of GPL V3
// from <http://www.gnu.org/licenses/>.
//
//-----------------------------------------------------------

#include <stdio.h>
#include <iostream>
#include <fstream>
#include <sstream>

#include "Buildings/Medical.h"
#include "Buildings/School.h"
#include "Buildings/Business.h"



void displayBuildingStatistics(double businessSizeProbablities[6], double hospitalSizeProbablities[6], double schoolSizeProbablities[6], double daycareSizeProbablities[6], string fileLocation){
    std::ostringstream outputString;
    
    outputString << "--------Buildings--------" << std::endl;
    outputString << "Total Buildings Generated: " << numberOfBuildings << std::endl;
    outputString << "----Businesses----" << std::endl;
    outputString <<"Total Generated: " << totalBusinesses << std::endl;
    outputString << "Employee Capacity 1-4:     \t" << totalBusinessSize[0] << " \t"<<(totalBusinessSize[0]/(double)totalBusinesses) << "\t(Expected " << businessSizeProbablities[0] << ")" << std::endl;
    outputString << "Employee Capacity 5-9:     \t" << totalBusinessSize[1] << " \t"<<(totalBusinessSize[1]/(double)totalBusinesses) << "\t(Expected " << businessSizeProbablities[1] << ")" << std::endl;
    outputString << "Employee Capacity 10-19:   \t" << totalBusinessSize[2] << " \t"<<(totalBusinessSize[2]/(double)totalBusinesses) << "\t(Expected " << businessSizeProbablities[2] << ")" << std::endl;
    outputString << "Employee Capacity 20-99:   \t" << totalBusinessSize[3] << " \t"<<(totalBusinessSize[3]/(double)totalBusinesses) << "\t(Expected " << businessSizeProbablities[3] << ")" << std::endl;
    outputString << "Employee Capacity 100-499: \t" << totalBusinessSize[4] << " \t"<<(totalBusinessSize[4]/(double)totalBusinesses) << "\t(Expected " << businessSizeProbablities[4] << ")" << std::endl;
    outputString << "Employee Capacity 500:     \t" << totalBusinessSize[5] << " \t"<<(totalBusinessSize[5]/(double)totalBusinesses) << "\t(Expected " << businessSizeProbablities[5] << ")" << std::endl;
    
    outputString << "----Hospitals----" << std::endl;
    outputString <<"Total Generated: " << totalHospitals << std::endl;
    outputString << "Employee Capacity 1-4:     \t" << totalHospitalSize[0] << " \t"<<(totalHospitalSize[0]/(double)totalHospitals) << "\t(Expected " << hospitalSizeProbablities[0] << ")" << std::endl;
    outputString << "Employee Capacity 5-9:     \t" << totalHospitalSize[1] << " \t"<<(totalHospitalSize[1]/(double)totalHospitals) << "\t(Expected " << hospitalSizeProbablities[1] << ")" << std::endl;
    outputString << "Employee Capacity 10-19:   \t" << totalHospitalSize[2] << " \t"<<(totalHospitalSize[2]/(double)totalHospitals) << "\t(Expected " << hospitalSizeProbablities[2] << ")" << std::endl;
    outputString << "Employee Capacity 20-99:   \t" << totalHospitalSize[3] << " \t"<<(totalHospitalSize[3]/(double)totalHospitals) << "\t(Expected " << hospitalSizeProbablities[3] << ")" << std::endl;
    outputString << "Employee Capacity 100-499: \t" << totalHospitalSize[4] << " \t"<<(totalHospitalSize[4]/(double)totalHospitals) << "\t(Expected " << hospitalSizeProbablities[4] << ")" << std::endl;
    outputString << "Employee Capacity 500:     \t" << totalHospitalSize[5] << " \t"<<(totalHospitalSize[5]/(double)totalHospitals) << "\t(Expected " << hospitalSizeProbablities[5] << ")" << std::endl;
    
    outputString << "----Schools----" << std::endl;
    outputString <<"Total Generated: " << totalSchools << std::endl;
    outputString << "Employee Capacity 1-4:     \t" << totalSchoolSize[0] << " \t"<<(totalSchoolSize[0]/(double)totalSchools) << "\t(Expected " << schoolSizeProbablities[0] << ")" << std::endl;
    outputString << "Employee Capacity 5-9:     \t" << totalSchoolSize[1] << " \t"<<(totalSchoolSize[1]/(double)totalSchools) << "\t(Expected " << schoolSizeProbablities[1] << ")" << std::endl;
    outputString << "Employee Capacity 10-19:   \t" << totalSchoolSize[2] << " \t"<<(totalSchoolSize[2]/(double)totalSchools) << "\t(Expected " << schoolSizeProbablities[2] << ")" << std::endl;
    outputString << "Employee Capacity 20-99:   \t" << totalSchoolSize[3] << " \t"<<(totalSchoolSize[3]/(double)totalSchools) << "\t(Expected " << schoolSizeProbablities[3] << ")" << std::endl;
    outputString << "Employee Capacity 100-499: \t" << totalSchoolSize[4] << " \t"<<(totalSchoolSize[4]/(double)totalSchools) << "\t(Expected " << schoolSizeProbablities[4] << ")" << std::endl;
    outputString << "Employee Capacity 500:     \t" << totalSchoolSize[5] << " \t"<<(totalSchoolSize[5]/(double)totalSchools) << "\t(Expected " << schoolSizeProbablities[5] << ")" << std::endl;
    
    outputString << "----Daycares----" << std::endl;
    outputString <<"Total Generated: " << totalDaycares << std::endl;
    outputString << "Employee Capacity 1-4:     \t" << totalDaycareSize[0] << " \t"<<(totalDaycareSize[0]/(double)totalDaycares) << "\t(Expected " << daycareSizeProbablities[0] << ")" << std::endl;
    outputString << "Employee Capacity 5-9:     \t" << totalDaycareSize[1] << " \t"<<(totalDaycareSize[1]/(double)totalDaycares) << "\t(Expected " << daycareSizeProbablities[1] << ")" << std::endl;
    outputString << "Employee Capacity 10-19:   \t" << totalDaycareSize[2] << " \t"<<(totalDaycareSize[2]/(double)totalDaycares) << "\t(Expected " << daycareSizeProbablities[2] << ")" << std::endl;
    outputString << "Employee Capacity 20-99:   \t" << totalDaycareSize[3] << " \t"<<(totalDaycareSize[3]/(double)totalDaycares) << "\t(Expected " << daycareSizeProbablities[3] << ")" << std::endl;
    outputString << "Employee Capacity 100-499: \t" << totalDaycareSize[4] << " \t"<<(totalDaycareSize[4]/(double)totalDaycares) << "\t(Expected " << daycareSizeProbablities[4] << ")" << std::endl;
    outputString << "Employee Capacity 500:     \t" << totalDaycareSize[5] << " \t"<<(totalDaycareSize[5]/(double)totalDaycares) << "\t(Expected " << daycareSizeProbablities[5] << ")" << std::endl;
    if(fileLocation==""){
        std::cout<< outputString.str();
    }else{
        ofstream buildingStatsFile;
        buildingStatsFile.open(fileLocation+"/buildingStatistics.txt");
        buildingStatsFile << outputString.str();
        buildingStatsFile.close();
        
    }
}
#endif
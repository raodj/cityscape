#ifndef BUILDING_GENERATOR_H
#define BUILDING_GENERATOR_H

//------------------------------------------------------------
//
// This file is part of HAPLOS <http://pc2lab.cec.miamiOH.edu/>
//
// Human  Population  and   Location  Simulator (HAPLOS)  is
// free software: you can  redistribute it and/or  modify it
// under the terms of the GNU  General Public License  (GPL)
// as published  by  the   Free  Software Foundation, either
// version 3 (GPL v3), or  (at your option) a later version.
//
// HAPLOS is distributed in the hope that it will  be useful,
// but   WITHOUT  ANY  WARRANTY;  without  even  the IMPLIED
// WARRANTY of  MERCHANTABILITY  or FITNESS FOR A PARTICULAR
// PURPOSE.
//
// Miami University and the HAPLOS  development team make no
// representations  or  warranties  about the suitability of
// the software,  either  express  or implied, including but
// not limited to the implied warranties of merchantability,
// fitness  for a  particular  purpose, or non-infringement.
// Miami  University and  its affiliates shall not be liable
// for any damages  suffered by the  licensee as a result of
// using, modifying,  or distributing  this software  or its
// derivatives.
//
// By using or  copying  this  Software,  Licensee  agree to
// abide  by the intellectual  property laws,  and all other
// applicable  laws of  the U.S.,  and the terms of the  GNU
// General  Public  License  (version 3).  You  should  have
// received a  copy of the  GNU General Public License along
// with HAPLOS.  If not, you may  download copies  of GPL V3
// from <http://www.gnu.org/licenses/>.
//
//-----------------------------------------------------------

#include "OsmSection.h"
#include "OsmBuilding.h"
#include "Configuration.h"

/** Class to encapsulate operations for generating buildings (homes,
    schools, offices etc.) using a given OSM XML file.  Note that this
    class is designed to work with a given OSM XML file specified as
    command-line arguments.  Consequently, it is important to call the
    process method in this class.
*/
class BuildingGenerator {
public:
    /** Constructor to create a generic Building Generator object.

        This constructor does not have much operation to perform other
        than to initialize instance variables to default initial
        values.
    */
    BuildingGenerator();

    /** The destructor.

        This is just a place holder as the destructor does not have
        any special tasks to perform (because this class does not
        directly use any dynamic memory).
     */
    ~BuildingGenerator();

    /** The top-level method to trigger all the processing in this
        class.

        This method coordinates the following key operations of this
        class/system:

        <ol>

        <li>Parse the supplied command-line arguments using the config
        Configuration class. </li>

        <li>Load the specified OSM XML file into the osm instance
        variable in this class.</li>

        <li>Generate bulidings using the OSM data via call to the
        generate method in this class.</li>

        <li>Generate output figure as requested by the user.</li>
        
        </ol>

        \param[in,out] argc The number of command-line arguments in argv.

        \param[in,out] argv The actual command-line arguments.
    */
    void process(int& argc, char *argv[]);
    
    /** The OSM section object being used by this generator.

        \return The OSM section object that contains the information
        to be used for generating buildings.
    */
    const OsmSection& getSection() const { return osm; }

    /** Obtain reference to the list of buildings being generated by
        this class.

        \return The buildings being generated.
    */
    const BuildingList& getBuildings() const { return bldList; }
    
protected:
    /** Top-level method to generate buildings, such as: homes,
        schools, offices etc. using information from OSM section.

        This method is a top-level method that uses various helper
        methods in this class (and other helper classes) to generate
        different types of buildings at appropriate locations.
    */
    void generate();
    
    /** Convenience method to generate homes on a given way.

        This method is a helper method that is invoked from the
        generate() method in this class.  This method is typically
        invoked only on residential streets where it makes sense to
        generate homes.

        \param[in] way The way on which homes are to be generated.
    */
    void generateHomes(const OsmWay& way);

    /** Convenience method to obtain the length of a given way in
        miles.

        This method sums-up the distance between two adjacent nodes in
        this way to determine the total length in miles.  The distance
        between two nodes is computed using Haversine formula:
        https://en.wikipedia.org/wiki/Haversine_formula

        \param[in] way The total length of this way in miles.

        \return The total length of this way in miles

        \see OsmNode::operator-
    */
    double getLength(const OsmWay& way) const;
    
private:
    /** The OSM section object that contains the information to be
        used for generating buildings.  This object is initialized
        indirectly in the parseArgs method in this class.
    */
    OsmSection osm;

    /** The list of buildings generated (or being generated) by this
        generator.
    */
    BuildingList bldList;

    /** The configuration object to parse and encapsulate command-line
        arguments.  The information in this class is loaded from the
        process method.
    */
    Configuration config;
};

#endif

#ifndef OSM_DATA_H
#define OSM_DATA_H

//---------------------------------------------------------------------------
//
// Copyright (c) PC2Lab Development Team
// All rights reserved.
//
// This file is part of free(dom) software -- you can redistribute it
// and/or modify it under the terms of the GNU General Public
// License (GPL)as published by the Free Software Foundation, either
// version 3 (GPL v3), or (at your option) a later version.
//
// The software is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the IMPLIED WARRANTY of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
//
// Miami University and PC2Lab makes no representations or warranties
// about the suitability of the software, either express or implied,
// including but not limited to the implied warranties of
// merchantability, fitness for a particular purpose, or
// non-infringement.  Miami University and PC2Lab is not be liable for
// any damages suffered by licensee as a result of using, result of
// using, modifying or distributing this software or its derivatives.
//
// By using or copying this Software, Licensee agrees to abide by the
// intellectual property laws, and all other applicable laws of the
// U.S., and the terms of this license.
//
// Authors: Dhananjai M. Rao       raodm@miamiOH.edu
//
//---------------------------------------------------------------------------

#include <unordered_map>
#include <vector>
#include <iostream>
#include <utility>

#include "PopRing.h"
#include "Node.h"
#include "Way.h"
#include "Building.h"

/** A simple class to encapsulate the model-data generated from OSM
    XML.  This class provides the core data that is used by other
    classes like PathFinder (to find path), etc.
*/
class OSMData {
public:
    /** A convenience class to obtain sorted list of information from
        the model. This class is essentially a 3-tuple, with
        Info::first containing ID (value depends on information) and
        Info::second and Info::third contains associated data.
    */
    class Info {
        /** Convenience stream-inserstion operator */
        friend std::ostream& operator<<(std::ostream&, const Info&);
    public:
        /** A convenience initializing constructor */
        Info(long first = -1, long second = -1, long third = -1) :
            first(first), second(second), third(third) {}

        /** Convenience comparison operator for sorting based on
            Info::second.
        */
        inline bool operator<(const Info& other) const {
            return (second > other.second);
        }

        /** The three instance variables contain values depending on
            the context in which the Info class is being used.
        */
        long first, second, third;
    };

    /** A convenience shortcut to a vector of Info objects */
    using InfoVec = std::vector<OSMData::Info>;

    /** Internal helper method to load nodes, ways, and buildings from
        a given model file.  Specifically it loads the data into
        nodeList, wayMap, and buildingMap instance variables in this
        class.

        \param[in] modelFilePath The path to the text file from where
        model data is to be loaded. This text/model file must have
        been generated by ModelGenerator in order to correctly
        operate with this method.
     */
    int loadModel(const std::string& modelFilePath);

    /** Method to obtain a sorted list of population rings and a
        choice of information associated with them.

        This method returns a list of objects. Each object is
        OSMData::Info, with Info::first corresponding to an index in
        popRings vector, and Info::second containing an atrribute of
        the population ring based on infoKind parameter.

        \param[in] infoKind The attribute to be returned for each
        population ring as tabulated below:

        infoKind | Attribute returned
        ---------|-----------------------
         0       | population
         1       | all buildings sq. ft
         2       | homes sq. ft

         \param[out] total The sum of the chosen attributes for each
         population ring.

         \return A vector of population rings. The vector is sorted
         (in descending order) based on the attribute value associated
         with each entry.
    */
    OSMData::InfoVec getSortedPopRingInfo(int infoKind, long& total) const;

    /** Method to obtain a sorted list of buildings and a choice of
        information associated with them.

        This method returns a list of objects. Each object is
        OSMData::Info, with Info::first corresponding to a building ID
        in buildingMap hash map, and Info::second containing an
        atrribute of the building based on infoKind parameter.

        \param[in] ringID An optional ID of the ring for which the
        building information is to be returned.  If this value is -1,
        then all buildings are returned.
        
        \param[in] infoKind The attribute to be returned for each
        population ring as tabulated below:

        infoKind | Attribute returned
        ---------|-----------------------
         0       | population
         1       | sq. ft

         \param[out] total The sum of the chosen attributes for each
         building.

         \return A vector of Info objects with building information
         . The vector is sorted (in descending order) based on the
         attribute value associated with each entry.
    */
    OSMData::InfoVec getSortedBldInfo(int ringID, int infoKind,
                                      long& total) const;
    
    /** The list of nodes loaded from the model file.  The nodes are
        stored as a vector as they are generated as a contiguous list
        by ModelGenerator.  This eases rapid look-up of nodes when
        finding path
    */
    std::vector<Node> nodeList;

    /** The unordered map that holds information about the ways in a
        given model.  This hash map is populated in the extractWays
        method.  The hash map enables rapid look-up of road
        information, given the unique ID of a way.  The look-up is
        used when routing traffic.
    */    
    std::unordered_map<long, Way> wayMap;

    /** The unordered map that holds information about buildings in a
        given model file.  The hash map enables rapid look-up of
        building information, given the unique ID of a building.
    */    
    std::unordered_map<long, Building> buildingMap;

    /** The list of ways associated with a given node. Nodes that are
        intersections will have one or more ways associated with them.
        This vector provides a convenient mapping to look-up ways
        intersecting at a given node when computing path.
    */
    std::vector<std::vector<long>> nodesWaysList;    

    /** The list of population rings in a given model file.  The rings
        are created from the information in the model.  The rings are
        primarily used for simulation purposes.
    */
    std::vector<PopRing> popRings;
    
protected:
    /** Add Way entries nodesWaysList vector in this class.  This
        information is handy to quickly find the list of ways
        intersecting at a given node.  This method is called right
        after the model has been loaded in the loadModel() class.
    */
    void computeNodesWaysList();
    
};

#endif

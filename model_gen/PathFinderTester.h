#ifndef PATH_FINDER_TESTER_H
#define PATH_FINDER_TESTER_H

//---------------------------------------------------------------------------
//
// Copyright (c) PC2Lab Development Team
// All rights reserved.
//
// This file is part of free(dom) software -- you can redistribute it
// and/or modify it under the terms of the GNU General Public
// License (GPL)as published by the Free Software Foundation, either
// version 3 (GPL v3), or (at your option) a later version.
//
// The software is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the IMPLIED WARRANTY of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
//
// Miami University and PC2Lab makes no representations or warranties
// about the suitability of the software, either express or implied,
// including but not limited to the implied warranties of
// merchantability, fitness for a particular purpose, or
// non-infringement.  Miami University and PC2Lab is not be liable for
// any damages suffered by licensee as a result of using, result of
// using, modifying or distributing this software or its derivatives.
//
// By using or copying this Software, Licensee agrees to abide by the
// intellectual property laws, and all other applicable laws of the
// U.S., and the terms of this license.
//
// Authors: Dhananjai M. Rao       raodm@miamiOH.edu
//
//---------------------------------------------------------------------------

#include "ArgParser.h"

class PathFinderTester {
public:
    /** The top-level method that coordinates the various tasks.
        
        This method essentially calls various internal helper methods
        in the following order:

        <ol>

        <li>First it calls loadModel method which loads the generated
        model with nodes, ways, and bulidings data into memory.</li>
        
        </ol>
    */
    int run(int argc, char *argv[]);

protected:
    /** This is a simple inner class that is used to conveniently
        encapsulate various command-line arguments that is used by the
        model generator.  This encapsulation streamlines managing
        several different command-line arguments in a streamlined
        manner
    */
    class CmdLineArgs {
    public:
        /** The path to the text file from where model data is to be
            loaded. This text file must have been generated by
            ModelGenerator in order to correctly operate with this
            class.  Use the \c --model command-line argument to set
            its value.
        */
        std::string modelFilePath;

        /** The starting ID of the building from where the path is to
            be computed.
        */
        long startBldID = -1;

        /** The ending ID of the building to which the path is to be
            computed.
        */
        long endBldID = -1;

        /** Optional output xfig file to which the route is to be
            drawn.
        */
        std::string xfigFilePath;

        /** The scale for the output XFIG figure so that various
            shapes and information are readable.
        */
        int figScale = 16384000;
    } cmdLineArgs;

    /** A simple class that encapsulates the OSM data */
    OSMData osmData;
    
private: 
    /** Internal helper method to parse command-line arguments and
        poulate the internal cmdLineArgs object with pertinent
        information.

        This method internally uses the ArgParser to parse out the
        command-line argument specified by the user.

        \param[in] args The number of command-line arguments -- i.e.,
        the size of the argv array.

        \param[in] argv The actual command-line arguments.

        \return This method returns zero if the command-line arguments
        were successfully processed.  On errors it returns a non-zero
        error code.
    */
    int processArgs(int argc, char *argv[]);   
};

#endif
